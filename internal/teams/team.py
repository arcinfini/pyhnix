import typing, logging

import discord

if typing.TYPE_CHECKING:
    from . import GuildTeamsCache

logger = logging.getLogger(__name__)


class Team:
    """
    CREATE TABLE team (
        id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        guildid BIGINT NOT NULL,
        name VARCHAR(50) NOT NULL,
        lead_roleid BIGINT,
        member_roleid BIGINT,

        UNIQUE(guildid, name)
    )
    """

    def __init__(self, team_cache: "GuildTeamsCache", /, data):
        self.name = data.get("name", None)
        self.guildid = data.get("guildid", None)

        self.id = data.get("id", None)

        self.lead_roleid = data.get("lead_roleid", None)
        self.member_roleid = data.get("member_roleid", None)

        self.team_cache = team_cache

    def __eq__(self, other):
        """
        Ensures both objects have the same name and guild id
        """

        return self.id == other.id

    def __repr__(self):
        return f"<Team name={self.name}, lead_id={self.lead_roleid}>"

    async def define_info(self) -> str:
        """
        TODO
        Defines a string to display basic information about the team.

        Displays, team id, team name, lead roleid, member roleid and stored
        member count
        """

        async with self.team_cache.bot.database.acquire() as conn:
            member_count = await conn.fetchval(
                """
                SELECT COUNT(userid) 
                FROM team_member 
                WHERE teamid=$1
                GROUP BY teamid;
                """,
                self.id,
            )

            if member_count is None:
                member_count = 0

        return (
            f"```"
            + f"Team: {self.name}\n"
            + f"Lead: {self.lead_roleid}\n"
            + f"Role: {self.member_roleid}\n"
            + f"Member Count: {member_count}\n"
            + "```"
        )

    async def fetch_members(self) -> typing.List[int]:
        """
        Returns a list of user ids that are currently a member of the team
        """

        async with self.team_cache.bot.database.acquire() as conn:
            members = await conn.fetch(
                """
            SELECT userid 
            FROM team_member
            WHERE teamid = $1
            """,
                self.id,
            )

        return [m["userid"] for m in members]

    async def add_member(
        self, user: discord.Object | discord.User | discord.Member
    ):
        """
        Adds a guild member to the team members
        """

        logger.debug("add %d to %s", user.id, repr(self))

        async with self.team_cache.bot.database.acquire() as conn:
            await conn.execute(
                """
            INSERT INTO team_member (teamid, userid)
            VALUES ($1, $2)
            ON CONFLICT DO NOTHING;
            """,
                self.id,
                user.id,
            )

    async def remove_member(
        self, user: discord.Object | discord.User | discord.Member
    ):
        """
        Removes a user from the team members
        """

        logger.debug("remove %d from %s", user.id, repr(self))

        async with self.team_cache.bot.database.acquire() as conn:
            await conn.execute(
                """
            DELETE FROM team_member
            WHERE teamid = $1 AND userid = $2;
            """,
                self.id,
                user.id,
            )

    async def edit(
        self,
        *,
        name: typing.Optional[str] = None,
        lead_role: typing.Optional[discord.Role] = None,
        member_role: typing.Optional[discord.Role] = None,
    ):
        """
        Edits the database to reflect the changes

        Makes used of coalesce which returns the first non-null value. This
        should allow the passing of default values without the need to overwrite
        """

        logger.debug("update team %s", repr(self))

        lead_roleid = lead_role.id if lead_role is not None else None
        member_roleid = member_role.id if member_role is not None else None

        async with self.team_cache.bot.database.acquire() as conn:
            updated = await conn.fetchrow(
                """
            UPDATE team SET
                name = COALESCE($1, name),
                lead_roleid = COALESCE($2, lead_roleid),
                member_roleid = COALESCE($3, member_roleid)
            WHERE id = $4
            RETURNING *
            """,
                name,
                lead_roleid,
                member_roleid,
                self.id,
            )

            self.raw_edit(
                name=updated["name"],
                lead_roleid=updated["lead_roleid"],
                member_roleid=updated["member_roleid"],
            )

    def raw_edit(
        self,
        *,
        name: typing.Optional[str] = None,
        lead_roleid: typing.Optional[int] = None,
        member_roleid: typing.Optional[int] = None,
    ):
        """
        A currently unimplemented method for editing the internal attributes of
        a team without making any database calls.

        This is to be used by the Cache to update teams in force_fetch
        """

        if name is not None:
            self.name = name
        if lead_roleid is not None:
            self.lead_roleid = lead_roleid
        if member_roleid is not None:
            self.member_roleid = member_roleid

    async def delete(self):
        """
        Deletes the role from the internal database
        """

        logger.debug("delete team %s", repr(self))

        async with self.team_cache.bot.database.acquire() as conn:
            await conn.execute(
                """
                DELETE FROM team
                WHERE id = $1
                """,
                self.id,
            )
